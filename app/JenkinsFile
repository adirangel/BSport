pipeline {
  agent {
    docker {
      image 'windsekirun/jenkins-android-docker:1.1.1'
    }
  }
      triggers {
        cron('H */24 * * *') //regular builds
        pollSCM('* * * * *') //polling for changes, here once a minute
    }
  options {
    skipStagesAfterUnstable()
  }
  stages {
    stage ('Prepare'){
      steps {
        sh 'chmod +x ./gradlew'
      }
    }
    stage("Verifing working space file exists"){
      steps{
        echo "Verifing working space file"
        dir('subDir') {
             checkout scm
             script {
                def CheckRepo = fileExists 'build.gradle'
                def CheckProp = fileExists'gradle.properties'
                if (CheckRepo && CheckProp){
                    echo 'build.gradle has been found'
                    echo 'gradle.properties has been found'
                }
                else{
                    echo 'Some files are missing!!!!'
                }
             }
           }
        script{
            def exists = fileExists '/var/jenkins_home/workspace/Team_7/Check'
            if (exists){
                echo "The file is exists"
                echo "The working space is : ${WORKSPACE}"
                }
            else{
                echo "The file doesnt exist"
                echo "The working space is : ${WORKSPACE}"
                }
           }
       }
   }
    stage('Compile') {
      steps {
        sh './gradlew compileDebugSources'
      }
    }
    stage('Unit test') {
      steps {
       // Compile and run the unit tests for the app and its dependencies
        sh './gradlew testDebugUnitTest testDebugUnitTest' 
      }
    }
    
    stage('Build APK') {
      steps {
        sh './gradlew assembleDebug'
      }
    }
    stage('Email Posting') {
      steps{
        echo 'email posting stage'
      }
      post {
        success {
          // Notify if the upload succeeded
          mail to: 'adirangel2@gmail.com', subject: 'New build available!', body: "Build ${env.BUILD_NUMBER} succeeded; ${env.BUILD_URL}"
          mail to: 'tairhadad1@gmail.com', subject: 'New build available!', body: "Build ${env.BUILD_NUMBER} succeeded; ${env.BUILD_URL}"
          mail to: 'yoni6232@gmail.com', subject: 'New build available!', body: "Build ${env.BUILD_NUMBER} succeeded; ${env.BUILD_URL}"
          mail to: 'asafrdt@gmail.com', subject: 'New build available!', body: "Build ${env.BUILD_NUMBER} succeeded; ${env.BUILD_URL}"
        }
      }
    }
  }
  post {
    failure {
      // Notify developer team of the failure
      mail to: 'adirangel2@gmail.com', subject: 'Oops!', body: "Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}" 
      mail to: 'tairhadad1@gmail.com', subject: 'Oops!', body: "Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}"
      mail to: 'yoni6232@gmail.com', subject: 'Oops!', body: "Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}"
      mail to: 'asafrdt@gmail.com', subject: 'Oops!', body: "Build ${env.BUILD_NUMBER} failed; ${env.BUILD_URL}"
    }
  }
  def jobPattern='pattern'
  Hudson.instance.getItems(Project).each {project ->
  def results = [:]
  if (project.name.contains(jobPattern)) {
    results."$project.name" = [SUCCESS:0,UNSTABLE:0,FAILURE:0,ABORTED:0]
    def build = project.getLastBuild()
    while (build){
      //println "$project.name;$build.id;$build.result"
      results."$project.name"."$build.result" = results."$project.name"."$build.result" +1
      build=build.getPreviousBuild()
    }
  }
  results.each{name,map->
    map.each{result,count->
      println "$name : $result = $count"
    }
  }
}
}
